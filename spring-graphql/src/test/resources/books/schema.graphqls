type Query {
    bookById(id: ID): Book
    booksById(id: [ID]): [Book]
    books(id: ID, name: String, author: String): [Book!]!
    booksByNestableCriteria(id: ID, name: String, author: AuthorCriteria): [Book!]!
    booksByCriteria(criteria:BookCriteria): [Book]
    booksByProjectedArguments(name: String, author: String): [Book]
    booksByProjectedCriteria(criteria:BookCriteria): [Book]
    authorById(id: ID): Author
}

type Mutation {
    addAuthor(firstName: String, lastName: String): Author
}

type Subscription {
    bookSearch(author: String) : Book!
}

input BookCriteria {
    id: ID
    author: String
}

input AuthorCriteria {
    id: ID
    firstName: String
    lastName: String
}

type Book {
    id: ID
    name: String
    author: Author
}

type Author {
    id: ID
    firstName: String
    lastName: String
}
